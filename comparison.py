table = """Func. Self-CCDE GRCDE MGRCDE LeDE/rand/1 LeDE/exp SON-DE/rand/1
F1 3.22e-027/5.04e-027 1.68e-030/9.22e-030 2.79e-029/6.15e-029 6.73e-030/3.69e-029 6.73e-030 3.69e-029 4.92e-029/8.09e-029
F2 1.65e+007/5.62e+006 3.34e+005/1.61e+005 1.85e+005/1.09e+005 1.12e+005/5.72e+004 2.58e+005 1.98e+005 1.51e+005/7.45e+004
F3 2.24e+008/1.44e+008 2.39e+001/6.42e+001 1.52e-003/4.03e-003 2.46e+005/8.47e+005 7.49e+000 2.84e+001 3.35e+001/9.19e+001
F4 5.17e+004/4.48e+004 6.49e+002/3.39e+002 1.37e+002/8.70e+001 1.14e+002/7.41e+001 5.15e+002 3.35e+002 1.49e+002/1.03e+002
F5 5.88e-016/1.72e-015 0.00e+000/0.00e+000 0.00e+000/0.00e+000 0.00e+000/0.00e+000 2.40e-029 6.85e-029 4.74e-016/1.80e-015
F6 1.95e+001/4.42e+000 1.13e+001/2.27e+000 8.63e+000/4.41e+000 1.54e+001/1.09e+001 9.57e+000 3.26e+000 4.23e+000/2.64e+000
F7 9.60e+001/1.26e+001 9.99e-002/1.88e-001 4.59e-002/6.19e-002 3.72e-001/4.37e-001 8.07e-002 1.39e-001 2.87e-001/3.22e-001
F8 2.09e+001/4.26e-002 2.09e+001/4.72e-002 2.10e+001/3.74e-002 2.10e+001/3.87e-002 2.09e+001 4.14e-002 2.09e+001/6.37e-002
F9 2.78e+001/2.09e+000 1.39e+001/7.26e+000 1.04e+001/3.53e+000 1.17e+001/4.43e+000 3.85e+001 1.33e+000 9.35e+000/3.89e+000
F10 4.17e+000/1.75e+000 2.04e-002/1.40e-002 1.81e-003/3.88e-003 5.44e-002/2.18e-002 8.54e-003 7.33e-003 2.64e-002/1.33e-002
F11 0.00e+000/0.00e+000 1.16e+001/3.65e+000 1.52e+001/4.15e+000 2.50e+001/1.97e+001 1.26e+002 2.13e+001 1.29e+001/3.97e+000
F12 8.98e+001/1.39e+001 7.81e+001/6.14e+001 3.78e+001/1.68e+001 1.06e+002/6.14e+001 1.76e+002 1.24e+001 3.29e+001/1.25e+001
F13 1.43e+002/1.61e+001 1.14e+002/4.23e+001 7.55e+001/2.76e+001 1.42e+002/4.96e+001 1.80e+002 9.96e+000 6.43e+001/2.28e+001
F14 2.23e-002/2.03e-002 6.74e+002/2.20e+002 7.69e+002/1.86e+002 6.10e+003/8.21e+002 6.40e+003 5.29e+002 5.45e+002/2.29e+002
F15 4.32e+003/3.22e+002 7.06e+003/3.03e+002 5.27e+003/6.46e+002 7.01e+003/2.11e+002 7.23e+003 3.35e+002 4.34e+003/7.62e+002
F16 1.62e+000/2.60e-001 2.51e+000/2.33e-001 2.33e+000/3.33e-001 2.43e+000/2.43e-001 2.48e+000 2.50e-001 2.21e+000/3.12e-001
F17 3.04e+001/1.47e-003 5.56e+001/5.98e+000 4.15e+002/5.45e+002 1.63e+002/2.22e+001 1.78e+002 1.92e+001 4.75e+001/4.92e+000
F18 1.69e+002/1.74e+001 1.98e+002/7.30e+000 6.66e+002/4.98e+002 1.92e+002/8.44e+000 2.09e+002 1.18e+001 1.05e+002/2.08e+001
F19 6.75e-001/1.50e-001 3.18e+000/1.35e+000 2.77e+000/7.29e-001 1.05e+001/3.75e+000 1.49e+001 9.58e-001 2.60e+000/4.63e-001
F20 1.44e+001/1.17e+000 1.18e+001/3.17e-001 1.10e+001/5.39e-001 1.17e+001/2.91e-001 1.21e+001 2.83e-001 1.06e+001/6.11e-001
F21 2.12e+002/2.94e+001 3.32e+002/7.31e+001 1.78e+003/1.21e+003 3.17e+002/8.00e+001 2.99e+002 7.01e+001 2.97e+002/7.94e+001
F22 3.14e+001/2.57e+001 5.72e+002/1.89e+002 6.28e+002/1.89e+002 6.24e+003/7.91e+002 6.28e+003 6.64e+002 4.86e+002/1.67e+002
F23 4.98e+003/3.82e+002 7.14e+003/8.22e+002 5.45e+003/6.95e+002 7.22e+003/2.85e+002 7.53e+003 2.78e+002 4.27e+003/8.77e+002
F24 2.72e+002/6.42e+000 2.00e+002/1.34e-001 2.91e+002/3.60e+001 2.04e+002/2.61e+000 2.00e+002 1.47e-002 2.02e+002/3.00e+000
F25 2.96e+002/3.76e+000 2.38e+002/1.59e+001 3.05e+002/2.39e+000 2.44e+002/1.60e+001 2.39e+002 1.14e+001 2.33e+002/2.26e+001
F26 2.02e+002/5.28e-001 2.03e+002/1.84e+001 2.00e+002/6.90e-003 2.00e+002/3.34e-003 2.00e+002 6.31e-003 2.03e+002/1.88e+001
F27 1.01e+003/1.48e+002 3.05e+002/6.31e+000 3.02e+002/2.21e+000 3.72e+002/5.28e+001 3.01e+002 1.26e+000 3.30e+002/2.51e+001
F28 3.00e+002/0.00e+000 3.00e+002/4.01e-006 3.00e+002/0.00e+000 3.00e+002/4.01e-006 3.00e+002 5.67e-006 3.00e+002/8.01e-006"""

columns = None
for line in table.split("\n"):
    if columns is None:
        columns = line.split(" ")
        values = {col: list() for col in columns}
    else:
        for i in range(len(columns)):
            value = line.split(" ")[i]

            if i > 0:
                value = value.split("/")[0]
                value = value.split("e")
                value = float(value[0]) * 10 ** int(value[1])

            values[columns[i]].append(value)

for i in range(1, len(columns) - 1):
    vit = 0
    der = 0
    for j in range(len(values[columns[-1]])):
        if values[columns[-1]][j] > values[columns[i]][j]:
            vit += 1
        else:
            der += 1
        
    print(f"{columns[i]}   \t[{vit}/{der}]")
